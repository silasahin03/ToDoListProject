{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(http) {\n      this.http = http;\n      this.apiUrl = 'http://localhost:3000/todos'; // Docker Compose'da tanımlanan servis adı ve portu\n    }\n    getAllTasks() {\n      return this.http.get(`${this.apiUrl}/tasks`);\n    }\n    addTask(newTask) {\n      return this.http.post(`${this.apiUrl}/tasks`, newTask);\n    }\n    updateTask(taskId, updatedTask) {\n      return this.http.put(`${this.apiUrl}/tasks/${taskId}`, updatedTask);\n    }\n    deleteTask(taskId) {\n      return this.http.delete(`${this.apiUrl}/tasks/${taskId}`);\n    }\n    getTask(taskId) {\n      return this.http.get(`${this.apiUrl}/tasks/${taskId}`);\n    }\n    getLastId() {\n      return this.http.get(`${this.apiUrl}/last-id`);\n    }\n    static #_ = this.ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":{"version":3,"names":["ApiService","constructor","http","apiUrl","getAllTasks","get","addTask","newTask","post","updateTask","taskId","updatedTask","put","deleteTask","delete","getTask","getLastId","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/sila/ToDoListProject/frontend/src/services/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Todo } from '../app/todo.model'; // Diyelim ki Todo modeli bu dosyada tanımlı\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private apiUrl = 'http://localhost:3000/todos'; // Docker Compose'da tanımlanan servis adı ve portu\n\n  constructor(private http: HttpClient) {}\n\n  getAllTasks(): Observable<Todo[]> {\n    return this.http.get<Todo[]>(`${this.apiUrl}/tasks`);\n  }\n\n  addTask(newTask: Todo): Observable<Todo> {\n    return this.http.post<Todo>(`${this.apiUrl}/tasks`, newTask);\n  }\n\n  updateTask(taskId: number, updatedTask: Todo): Observable<Todo> {\n    return this.http.put<Todo>(`${this.apiUrl}/tasks/${taskId}`, updatedTask);\n  }\n\n  deleteTask(taskId: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/tasks/${taskId}`);\n  }\n\n  getTask(taskId: number): Observable<Todo> {\n    return this.http.get<Todo>(`${this.apiUrl}/tasks/${taskId}`);\n  }\n  getLastId(): Observable<number> {\n    return this.http.get<number>(`${this.apiUrl}/last-id`);\n  }\n}\n"],"mappings":";;AASA,WAAaA,UAAU;EAAjB,MAAOA,UAAU;IAGrBC,YAAoBC,IAAgB;MAAhB,KAAAA,IAAI,GAAJA,IAAI;MAFhB,KAAAC,MAAM,GAAG,6BAA6B,CAAC,CAAC;IAET;IAEvCC,WAAWA,CAAA;MACT,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,GAAG,IAAI,CAACF,MAAM,QAAQ,CAAC;IACtD;IAEAG,OAAOA,CAACC,OAAa;MACnB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAO,GAAG,IAAI,CAACL,MAAM,QAAQ,EAAEI,OAAO,CAAC;IAC9D;IAEAE,UAAUA,CAACC,MAAc,EAAEC,WAAiB;MAC1C,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAO,GAAG,IAAI,CAACT,MAAM,UAAUO,MAAM,EAAE,EAAEC,WAAW,CAAC;IAC3E;IAEAE,UAAUA,CAACH,MAAc;MACvB,OAAO,IAAI,CAACR,IAAI,CAACY,MAAM,CAAO,GAAG,IAAI,CAACX,MAAM,UAAUO,MAAM,EAAE,CAAC;IACjE;IAEAK,OAAOA,CAACL,MAAc;MACpB,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAO,GAAG,IAAI,CAACF,MAAM,UAAUO,MAAM,EAAE,CAAC;IAC9D;IACAM,SAASA,CAAA;MACP,OAAO,IAAI,CAACd,IAAI,CAACG,GAAG,CAAS,GAAG,IAAI,CAACF,MAAM,UAAU,CAAC;IACxD;IAAC,QAAAc,CAAA,G;uBA1BUjB,UAAU,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;IAAA,QAAAC,EAAA,G;aAAVtB,UAAU;MAAAuB,OAAA,EAAVvB,UAAU,CAAAwB,IAAA;MAAAC,UAAA,EAFT;IAAM;;SAEPzB,UAAU;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}